0.2.2.0
 - <buffer_dir> can be '?' (w/o the '') to enable use of default system "temp" dir (this is the default now instead of '.')
 - config parameters with incorrect values (buffer_size) no longer re-written with corrected values in config
 - config file generating (-i or 'save'  while running )do not erase existing players
 - add command line option '-Z' to disable interactive mode, allowing backgrounding using '&' in Linux (no more consumes 100% CPU)
 - buffer files are now deleted each time user stops a playback unless new parameter <keep_buffer_file> is set to 1
 - add <max_volume> parameter to scale and limit the <volume_curve>. Any value calculated from volume curve is scaled by <max_volume>/100
 - Window version is renamed squeeze2upnp-win
 - add -I command line option to auto-save config file at each scan
 - some players trigger false detectio of URI change by reporting empty nextURI, so check the nextURI contains "-idx-" pattern
 - when saving an existing device, the UPnP friendly name was used, even if a different name was set in configuration

0.2.1.0
 - <upnp_scan_timeout> at 0 was not disabling scan
 - added <upnp_remove_count> parameter to remove a device only N times after failed re-discovery
 - add Ralphy's patch (SendARP) to compile for OSX
 - reset read pointer in sq_read by calling fseek

0.2.0.1
 - Race condition where a upnp poll-response can be interrupted by the update thread that removes that device - locking a non-existing mutex happens then
 - Handle 24 bits mono tracks with PACKED format
 - when <send_metadata> was disabled, some default metadata were not initialized (was missing backport from 0.1.4.0)
 - very quick pause/unpause created an infinite loop (created by fixing dealock issue between upnp notification and LMS playback in 0.2.0.0)
 - on quick unpause/pause, the pause command was ignored - can be irritating if unpause was pressed by mistake

0.2.0.0
 - each player uses own timer thread to poll position, track and related info instead of a single thread for all players
 - upnp rescan dedicated thread created at each scan interval to avoid blocking libupnp caller thread in callback
 - continue re-organizing LOG
 - metadata using "songinfo" CLI command to allow access to more information, includign albumart (still fallback to use "playlist" info if "songinfo" fails)
 - on <accept_next_uri> = 0, metadat was not properly handled, leading to random filesize being sent
 - add <upnp_scan_timeout> to configure how long a network player *rescan* lasts (initial scan is still 15)
 - <upnp_scan_interval> is 30 seconds minimum
 - When skipping track very quickly, a "playing" state of previous skip could be received before the "stopped" state or last skip, causing player to stall (confused with an unsollicited play)
 - force_volume was used, even when volume_on_play was set to -1 in SyncNotifyState
 - option -i was broken before a5 release
 - context index toggle shall be done after stream mutex lock (slimproto)
 - remove deadlock between upnp notification and LMS playback request (sq_notify call in SyncNotifyState)
 - global Mutex for renderer list un-necessary now that list is a table
 - change some string definition to allow VC2008 compilation
 - add the option to set a socket for upnp operations


0.1.4.0
 - <volume_on_play> can be set to -1 so that *all* LMS volume commands are ignored (use the player's volume control)
 - When pause/play directly on the player, action is feedback to LMS that should stay in sycn (still early phase ...). This does NOT work when "stop" is being used - such "stop" will be interpreted by LMS as an error and will move to next track
 - if uPnP player cannot play a format, send the proper error code to LMS (also send STMc everytime) == > that's to avoid being stuck in a middle of a playlist - LMS will gently move to the next song and a squeeze2upnp will just log the problem
 - add <flac_header> parameter
 - add <send_metadata> parameter
 - add <upnp_scan_interval> paramater (O to disable regular scan)
 - building a Linux statically linked version as well (-static)
 - <seek_after_pause> now 0,1 or 2 (2 restarts stream from that last sent byte - will stay undocumented as it does not seem to work)
 - add -4 for <stream_length> to allow usage of unkown file size to be sent *but* not using chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), responding to open-ended request (xxx-) by HTTP 206 and range xxx-yyy/*
 - add -1 for <stream_length> to allow usage of unkown file size to be sent *but* not using chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), responding to open-ended requests (xxx-) by HTTP 200 instead of 206
 - add -2 for <stream_length> to allow usage of chunked-encoding (need updated libupnp webserver.c and httpreadwrite.c), and responding to open-ended requests (xxx-) by HTTP 200 instead of 206
 - update DIDL-lite header to add DLNA namespace, <upnp:artist>, trackNumber and tweak other parameters
 - <mac> added to each device. As pointed by ralphy, current logic was not working properly. Now, if mac predecence is 1/ mac from <device>, then mac from ARP network request, then mac from <base_mac> + n (Nth player). when "save <filename> is called, the <mac> is re-written for every device. 
 - add command line "-i <config file>" to discover upnp players, save config file, then exit
 - add command line "-p <pidfile>" to store the pid
 - "unexpected" stops managed from squeelite side instead of uPnP (NB: a "stop" from the player"s remote will cause LMS to move to next track, NOT to stop
 - if <buffer_limit> is smaller than max(<streambuf_size>, <outputbuf_size>) * 4, set it to that max
 - <can_pause> parameter removed
 - big fat warning when config file has an error and cannot be loaded
 - improve HTTP range request response (might have impact with <buffer_limit> and pause reaction)
 - Update COMPATIBILITY file
 - remove all warning for Linux compilation
 - "cookie" is now a proper pointer, no more integer cast
 - configure libupnp with disabled blocking TCP connection and gen GENA timeouts to avoid "disapearing players" to lock the job queue, ending to a "too many jobs" disaster in libupnp
 - Stop sending poll request to a player that has generated more than 5 consecutives ACTION_ERROR (has disappeared probably)
 - for each player, check that <buffer_dir> is accessible in WRITE mode (and remove device if it is not)
 - Improved cleanup on exit() to avoid coredump 
 - Improved LMS device deletion when upnp device disappears 
 - When the same uPnP player disappears and re-apppears, re-connect was not working
 - Removed all memory leaks found by valgrind
 - metadata request can cause a fault if the list has been emptied (modulus 0 call)
 - when disabled, metadata gathering was causing fault. 
 - take into account metadata config as well when accept_nexturi is disable
 - sq_get_metadata must fill metadata in all cases, no NULL can be returned 
 - start to re-organize LOG levels
 - prepare metadata gathering for artwork and extended information (like filesize)
 - 64 bits int printed with %Ld for arm
 - divide by 0 on volume removed (was causing volume command 0 ==> 255)
 - volume calculation does not use float anymore (integer arithmetic only)
 - <volume_curve> ending pair changed so be (0x7fffffff,0x7f) to work with integer arithmetic
 - initialize a string in AddMRDevice


0.1.3.3 
 - with <seek_after_pause> set to 1, unpause was not restarting at the right time if repositionig was done during pause
 - when upnp device capability for pcm does not detail sample rate and channel (ie audio/L16), add the channel and rate details in the mime-type response (ie audio/L16;channels=2;rate=44100) - was need for foobar2000
 - add aac in the supported format (does not seem to work with Sonos or foobar yet)
 - <volume_on_play> to 1 by default
 - <volume_curve> max by default is 65536 instead of 65535
 - check that squeezelite instance was created before trying to run it
 - L/R inversion corrected in PCM 24 bits, packed type 1
 - buffer write file opening done as soon as LMS play command is received (quick GET)
 - in flac metadata (for repositionning) vorbis header is needed to NamUniti
 - flac header in re-positioning was not set as "last block = 0x80" (happened after vorbis_comment was removed)
 - handle case where no playlist index is returned in metadata (crash)
 - metadata track and time request were doubling the '?'
 - add metadata 
 - change incorrect upnp:artist to dc:creator in DIDL string
 - change back flac header re-insertion default max block size to 0xfff
 - remove a few compiler warning
 - improve the "synchronous start" (continuous synchro does not work)

0.1.2.0
 - add a wav header to pcm stream for players that accept audio/wav, audio/x-wav and audio/wave in protocol info by do not accept audio/Lxx (xx = sample size).Was needed for Sonos to receive pcm samples. Endianness pobably need more attention
 - re-organize format detection code for wave header addition
 - suppress DIRECT mode (was useless)
 - correct some coredump on exit (access to invalid file handles)