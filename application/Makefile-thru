BASE		= ..
OS 		:= $(shell uname)
CFLAGS		+= -Wno-multichar

ifeq ($(OS),Darwin)
LDFLAGS 	+= -Wl,-dead_strip
else
LDFLAGS 	+= -Wl,--gc-sections
endif

TOOLS		= ./tools
SRC		= ./squeeze2upnp
SQUEEZETINY	= ./squeezetiny

VALGRIND	= $(BASE)/valgrind
UPNP 		= $(BASE)/libupnp/1.6.19
FETCHER		= $(BASE)/http_fetcher

DEFINES 	= -D_FILE_OFFSET_BITS=64 
CFLAGS 		+= -fdata-sections -ffunction-sections 

vpath %.c $(TOOLS):$(SRC):$(SQUEEZETINY)
vpath %.cpp $(TOOLS):$(SRC):$(SQUEEZETINY)

INCLUDE = -I. \
		  -I$(BASE)\
		  -I$(VALGRIND)/memcheck -I$(VALGRIND)/include \
		  -I$(SQUEEZETINY) \
		  -I$(TOOLS) \
		  -I$(SRC) -I$(SRC)/inc \
		  -I$(UPNP)/ixml/inc -I$(UPNP)/upnp/inc -I$(UPNP)/build/inc -I$(UPNP)/threadutil/inc 
		  		  
DEPS	= $(SQUEEZETINY)/squeezedefs.h
				  
SOURCES = 	slimproto.c buffer.c util.c output_http.c main.c \
			stream.c decode.c pcm.c \
			flac_thru.c thru.c m4a_thru.c \
			util_common.c avt_util.c mr_util.c tinyutils.c squeeze2upnp.c \
			log_util.c config_upnp.c
		
SOURCES_LIBS = output.c
		
OBJECTS 		= $(patsubst %.c,$(OBJ)/%.o,$(filter %.c,$(SOURCES))) $(patsubst %.cpp,$(OBJ)/%.o,$(filter %.cpp,$(SOURCES))) $(patsubst %.c,$(OBJ)/%.o,$(SOURCES_LIBS)) 

LIBRARY 	= $(OBJ)/libupnp.a $(OBJ)/libixml.a $(OBJ)/libthreadutil.a 

all: $(EXECUTABLE) 

$(EXECUTABLE): $(OBJECTS)
	$(CC) $(OBJECTS) $(LIBRARY) $(LDFLAGS) -o $@

$(OBJECTS): $(DEPS) | bin $(OBJ)

$(OBJ):
	@mkdir -p $@
	
bin:	
	@mkdir -p bin

$(OBJ)/%.o : %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDE) $< -c -o $@

$(OBJ)/%.o : %.cpp
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDE) $< -c -o $@	

clean:
	rm -f $(OBJECTS) $(EXECUTABLE)  

